# coding: utf-8

"""
    Engine api

    Engine APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Zone(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'zone_id': 'int',
        'zone_type': 'ZoneType',
        'number_of_vertices': 'int',
        'vertices': 'list[Vertex]',
        'line_setting': 'Line',
        'config': 'list[Config]'
    }

    attribute_map = {
        'zone_id': 'zoneId',
        'zone_type': 'zoneType',
        'number_of_vertices': 'numberOfVertices',
        'vertices': 'vertices',
        'line_setting': 'lineSetting',
        'config': 'config'
    }

    def __init__(self, zone_id=0, zone_type=None, number_of_vertices=4, vertices=None, line_setting=None, config=None):  # noqa: E501
        """Zone - a model defined in OpenAPI"""  # noqa: E501

        self._zone_id = None
        self._zone_type = None
        self._number_of_vertices = None
        self._vertices = None
        self._line_setting = None
        self._config = None
        self.discriminator = None

        if zone_id is not None:
            self.zone_id = zone_id
        if zone_type is not None:
            self.zone_type = zone_type
        if number_of_vertices is not None:
            self.number_of_vertices = number_of_vertices
        if vertices is not None:
            self.vertices = vertices
        if line_setting is not None:
            self.line_setting = line_setting
        if config is not None:
            self.config = config

    @property
    def zone_id(self):
        """Gets the zone_id of this Zone.  # noqa: E501


        :return: The zone_id of this Zone.  # noqa: E501
        :rtype: int
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this Zone.


        :param zone_id: The zone_id of this Zone.  # noqa: E501
        :type: int
        """

        self._zone_id = zone_id

    @property
    def zone_type(self):
        """Gets the zone_type of this Zone.  # noqa: E501


        :return: The zone_type of this Zone.  # noqa: E501
        :rtype: ZoneType
        """
        return self._zone_type

    @zone_type.setter
    def zone_type(self, zone_type):
        """Sets the zone_type of this Zone.


        :param zone_type: The zone_type of this Zone.  # noqa: E501
        :type: ZoneType
        """

        self._zone_type = zone_type

    @property
    def number_of_vertices(self):
        """Gets the number_of_vertices of this Zone.  # noqa: E501


        :return: The number_of_vertices of this Zone.  # noqa: E501
        :rtype: int
        """
        return self._number_of_vertices

    @number_of_vertices.setter
    def number_of_vertices(self, number_of_vertices):
        """Sets the number_of_vertices of this Zone.


        :param number_of_vertices: The number_of_vertices of this Zone.  # noqa: E501
        :type: int
        """

        self._number_of_vertices = number_of_vertices

    @property
    def vertices(self):
        """Gets the vertices of this Zone.  # noqa: E501


        :return: The vertices of this Zone.  # noqa: E501
        :rtype: list[Vertex]
        """
        return self._vertices

    @vertices.setter
    def vertices(self, vertices):
        """Sets the vertices of this Zone.


        :param vertices: The vertices of this Zone.  # noqa: E501
        :type: list[Vertex]
        """

        self._vertices = vertices

    @property
    def line_setting(self):
        """Gets the line_setting of this Zone.  # noqa: E501


        :return: The line_setting of this Zone.  # noqa: E501
        :rtype: Line
        """
        return self._line_setting

    @line_setting.setter
    def line_setting(self, line_setting):
        """Sets the line_setting of this Zone.


        :param line_setting: The line_setting of this Zone.  # noqa: E501
        :type: Line
        """

        self._line_setting = line_setting

    @property
    def config(self):
        """Gets the config of this Zone.  # noqa: E501


        :return: The config of this Zone.  # noqa: E501
        :rtype: list[Config]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Zone.


        :param config: The config of this Zone.  # noqa: E501
        :type: list[Config]
        """

        self._config = config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Zone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

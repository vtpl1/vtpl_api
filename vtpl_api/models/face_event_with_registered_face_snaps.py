# coding: utf-8

"""
    Engine api

    Engine APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FaceEventWithRegisteredFaceSnaps(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'face_event': 'FaceEventWithEventSnaps',
        'registered_face_with_face_snaps': 'RegisteredFaceWithFaceSnaps'
    }

    attribute_map = {
        'face_event': 'faceEvent',
        'registered_face_with_face_snaps': 'registeredFaceWithFaceSnaps'
    }

    def __init__(self, face_event=None, registered_face_with_face_snaps=None):  # noqa: E501
        """FaceEventWithRegisteredFaceSnaps - a model defined in OpenAPI"""  # noqa: E501

        self._face_event = None
        self._registered_face_with_face_snaps = None
        self.discriminator = None

        if face_event is not None:
            self.face_event = face_event
        if registered_face_with_face_snaps is not None:
            self.registered_face_with_face_snaps = registered_face_with_face_snaps

    @property
    def face_event(self):
        """Gets the face_event of this FaceEventWithRegisteredFaceSnaps.  # noqa: E501


        :return: The face_event of this FaceEventWithRegisteredFaceSnaps.  # noqa: E501
        :rtype: FaceEventWithEventSnaps
        """
        return self._face_event

    @face_event.setter
    def face_event(self, face_event):
        """Sets the face_event of this FaceEventWithRegisteredFaceSnaps.


        :param face_event: The face_event of this FaceEventWithRegisteredFaceSnaps.  # noqa: E501
        :type: FaceEventWithEventSnaps
        """

        self._face_event = face_event

    @property
    def registered_face_with_face_snaps(self):
        """Gets the registered_face_with_face_snaps of this FaceEventWithRegisteredFaceSnaps.  # noqa: E501


        :return: The registered_face_with_face_snaps of this FaceEventWithRegisteredFaceSnaps.  # noqa: E501
        :rtype: RegisteredFaceWithFaceSnaps
        """
        return self._registered_face_with_face_snaps

    @registered_face_with_face_snaps.setter
    def registered_face_with_face_snaps(self, registered_face_with_face_snaps):
        """Sets the registered_face_with_face_snaps of this FaceEventWithRegisteredFaceSnaps.


        :param registered_face_with_face_snaps: The registered_face_with_face_snaps of this FaceEventWithRegisteredFaceSnaps.  # noqa: E501
        :type: RegisteredFaceWithFaceSnaps
        """

        self._registered_face_with_face_snaps = registered_face_with_face_snaps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FaceEventWithRegisteredFaceSnaps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

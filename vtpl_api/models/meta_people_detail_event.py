# coding: utf-8

"""
    Engine api

    Engine APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class MetaPeopleDetailEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sex': 'Gender',
        'attire': 'Attire',
        'color_upper': 'Color',
        'color_lower': 'Color'
    }

    attribute_map = {
        'sex': 'sex',
        'attire': 'attire',
        'color_upper': 'colorUpper',
        'color_lower': 'colorLower'
    }

    def __init__(self, sex=None, attire=None, color_upper=None, color_lower=None):  # noqa: E501
        """MetaPeopleDetailEvent - a model defined in OpenAPI"""  # noqa: E501

        self._sex = None
        self._attire = None
        self._color_upper = None
        self._color_lower = None
        self.discriminator = None

        if sex is not None:
            self.sex = sex
        if attire is not None:
            self.attire = attire
        if color_upper is not None:
            self.color_upper = color_upper
        if color_lower is not None:
            self.color_lower = color_lower

    @property
    def sex(self):
        """Gets the sex of this MetaPeopleDetailEvent.  # noqa: E501


        :return: The sex of this MetaPeopleDetailEvent.  # noqa: E501
        :rtype: Gender
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this MetaPeopleDetailEvent.


        :param sex: The sex of this MetaPeopleDetailEvent.  # noqa: E501
        :type: Gender
        """

        self._sex = sex

    @property
    def attire(self):
        """Gets the attire of this MetaPeopleDetailEvent.  # noqa: E501


        :return: The attire of this MetaPeopleDetailEvent.  # noqa: E501
        :rtype: Attire
        """
        return self._attire

    @attire.setter
    def attire(self, attire):
        """Sets the attire of this MetaPeopleDetailEvent.


        :param attire: The attire of this MetaPeopleDetailEvent.  # noqa: E501
        :type: Attire
        """

        self._attire = attire

    @property
    def color_upper(self):
        """Gets the color_upper of this MetaPeopleDetailEvent.  # noqa: E501


        :return: The color_upper of this MetaPeopleDetailEvent.  # noqa: E501
        :rtype: Color
        """
        return self._color_upper

    @color_upper.setter
    def color_upper(self, color_upper):
        """Sets the color_upper of this MetaPeopleDetailEvent.


        :param color_upper: The color_upper of this MetaPeopleDetailEvent.  # noqa: E501
        :type: Color
        """

        self._color_upper = color_upper

    @property
    def color_lower(self):
        """Gets the color_lower of this MetaPeopleDetailEvent.  # noqa: E501


        :return: The color_lower of this MetaPeopleDetailEvent.  # noqa: E501
        :rtype: Color
        """
        return self._color_lower

    @color_lower.setter
    def color_lower(self, color_lower):
        """Sets the color_lower of this MetaPeopleDetailEvent.


        :param color_lower: The color_lower of this MetaPeopleDetailEvent.  # noqa: E501
        :type: Color
        """

        self._color_lower = color_lower

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetaPeopleDetailEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

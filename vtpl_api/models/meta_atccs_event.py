# coding: utf-8

"""
    Engine api

    Engine APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class MetaAtccsEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vehicle_class': 'VehicleClass',
        'vehicle_count': 'int'
    }

    attribute_map = {
        'vehicle_class': 'vehicleClass',
        'vehicle_count': 'vehicleCount'
    }

    def __init__(self, vehicle_class=None, vehicle_count=0):  # noqa: E501
        """MetaAtccsEvent - a model defined in OpenAPI"""  # noqa: E501

        self._vehicle_class = None
        self._vehicle_count = None
        self.discriminator = None

        if vehicle_class is not None:
            self.vehicle_class = vehicle_class
        if vehicle_count is not None:
            self.vehicle_count = vehicle_count

    @property
    def vehicle_class(self):
        """Gets the vehicle_class of this MetaAtccsEvent.  # noqa: E501


        :return: The vehicle_class of this MetaAtccsEvent.  # noqa: E501
        :rtype: VehicleClass
        """
        return self._vehicle_class

    @vehicle_class.setter
    def vehicle_class(self, vehicle_class):
        """Sets the vehicle_class of this MetaAtccsEvent.


        :param vehicle_class: The vehicle_class of this MetaAtccsEvent.  # noqa: E501
        :type: VehicleClass
        """

        self._vehicle_class = vehicle_class

    @property
    def vehicle_count(self):
        """Gets the vehicle_count of this MetaAtccsEvent.  # noqa: E501

        # of vehicle detected by engine  # noqa: E501

        :return: The vehicle_count of this MetaAtccsEvent.  # noqa: E501
        :rtype: int
        """
        return self._vehicle_count

    @vehicle_count.setter
    def vehicle_count(self, vehicle_count):
        """Sets the vehicle_count of this MetaAtccsEvent.

        # of vehicle detected by engine  # noqa: E501

        :param vehicle_count: The vehicle_count of this MetaAtccsEvent.  # noqa: E501
        :type: int
        """

        self._vehicle_count = vehicle_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetaAtccsEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

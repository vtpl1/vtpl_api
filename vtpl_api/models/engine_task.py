# coding: utf-8

"""
    Engine api

    Engine APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EngineTask(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'capbilities_type': 'Capability',
        'event_type': 'EventType',
        'engine_machine_id': 'str',
        'is_expired': 'bool',
        'time_to_live': 'int',
        'source': 'SourceEndPoint',
        'destination': 'DestinationEndPoint',
        'zone_setting': 'EngineTaskZoneSetting',
        'line_setting': 'EngineTaskLineSetting',
        'config': 'list[Config]',
        'updated': 'datetime',
        'created': 'datetime',
        'etag': 'str',
        'links': 'Links'
    }

    attribute_map = {
        'id': '_id',
        'capbilities_type': 'capbilitiesType',
        'event_type': 'eventType',
        'engine_machine_id': 'engineMachineId',
        'is_expired': 'isExpired',
        'time_to_live': 'timeToLive',
        'source': 'source',
        'destination': 'destination',
        'zone_setting': 'zoneSetting',
        'line_setting': 'lineSetting',
        'config': 'config',
        'updated': 'updated',
        'created': 'created',
        'etag': 'etag',
        'links': 'links'
    }

    def __init__(self, id=None, capbilities_type=None, event_type=None, engine_machine_id=None, is_expired=False, time_to_live=-1, source=None, destination=None, zone_setting=None, line_setting=None, config=None, updated=None, created=None, etag=None, links=None):  # noqa: E501
        """EngineTask - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._capbilities_type = None
        self._event_type = None
        self._engine_machine_id = None
        self._is_expired = None
        self._time_to_live = None
        self._source = None
        self._destination = None
        self._zone_setting = None
        self._line_setting = None
        self._config = None
        self._updated = None
        self._created = None
        self._etag = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if capbilities_type is not None:
            self.capbilities_type = capbilities_type
        if event_type is not None:
            self.event_type = event_type
        if engine_machine_id is not None:
            self.engine_machine_id = engine_machine_id
        if is_expired is not None:
            self.is_expired = is_expired
        if time_to_live is not None:
            self.time_to_live = time_to_live
        if source is not None:
            self.source = source
        if destination is not None:
            self.destination = destination
        if zone_setting is not None:
            self.zone_setting = zone_setting
        if line_setting is not None:
            self.line_setting = line_setting
        if config is not None:
            self.config = config
        if updated is not None:
            self.updated = updated
        if created is not None:
            self.created = created
        if etag is not None:
            self.etag = etag
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this EngineTask.  # noqa: E501


        :return: The id of this EngineTask.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EngineTask.


        :param id: The id of this EngineTask.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def capbilities_type(self):
        """Gets the capbilities_type of this EngineTask.  # noqa: E501


        :return: The capbilities_type of this EngineTask.  # noqa: E501
        :rtype: Capability
        """
        return self._capbilities_type

    @capbilities_type.setter
    def capbilities_type(self, capbilities_type):
        """Sets the capbilities_type of this EngineTask.


        :param capbilities_type: The capbilities_type of this EngineTask.  # noqa: E501
        :type: Capability
        """

        self._capbilities_type = capbilities_type

    @property
    def event_type(self):
        """Gets the event_type of this EngineTask.  # noqa: E501


        :return: The event_type of this EngineTask.  # noqa: E501
        :rtype: EventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EngineTask.


        :param event_type: The event_type of this EngineTask.  # noqa: E501
        :type: EventType
        """

        self._event_type = event_type

    @property
    def engine_machine_id(self):
        """Gets the engine_machine_id of this EngineTask.  # noqa: E501


        :return: The engine_machine_id of this EngineTask.  # noqa: E501
        :rtype: str
        """
        return self._engine_machine_id

    @engine_machine_id.setter
    def engine_machine_id(self, engine_machine_id):
        """Sets the engine_machine_id of this EngineTask.


        :param engine_machine_id: The engine_machine_id of this EngineTask.  # noqa: E501
        :type: str
        """

        self._engine_machine_id = engine_machine_id

    @property
    def is_expired(self):
        """Gets the is_expired of this EngineTask.  # noqa: E501

        Explanations: * true = Engines will NEVER execute this task * false = Engines will execute this task  # noqa: E501

        :return: The is_expired of this EngineTask.  # noqa: E501
        :rtype: bool
        """
        return self._is_expired

    @is_expired.setter
    def is_expired(self, is_expired):
        """Sets the is_expired of this EngineTask.

        Explanations: * true = Engines will NEVER execute this task * false = Engines will execute this task  # noqa: E501

        :param is_expired: The is_expired of this EngineTask.  # noqa: E501
        :type: bool
        """

        self._is_expired = is_expired

    @property
    def time_to_live(self):
        """Gets the time_to_live of this EngineTask.  # noqa: E501

        Time in milliseconds of expiry or the task. Engines will not execute an expired task. Explanations: * -1 = Never expires * -2 = Expired *  0 = Will expire in 0 milliseconds * >0 = milliseconds till expiry  # noqa: E501

        :return: The time_to_live of this EngineTask.  # noqa: E501
        :rtype: int
        """
        return self._time_to_live

    @time_to_live.setter
    def time_to_live(self, time_to_live):
        """Sets the time_to_live of this EngineTask.

        Time in milliseconds of expiry or the task. Engines will not execute an expired task. Explanations: * -1 = Never expires * -2 = Expired *  0 = Will expire in 0 milliseconds * >0 = milliseconds till expiry  # noqa: E501

        :param time_to_live: The time_to_live of this EngineTask.  # noqa: E501
        :type: int
        """

        self._time_to_live = time_to_live

    @property
    def source(self):
        """Gets the source of this EngineTask.  # noqa: E501


        :return: The source of this EngineTask.  # noqa: E501
        :rtype: SourceEndPoint
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this EngineTask.


        :param source: The source of this EngineTask.  # noqa: E501
        :type: SourceEndPoint
        """

        self._source = source

    @property
    def destination(self):
        """Gets the destination of this EngineTask.  # noqa: E501


        :return: The destination of this EngineTask.  # noqa: E501
        :rtype: DestinationEndPoint
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this EngineTask.


        :param destination: The destination of this EngineTask.  # noqa: E501
        :type: DestinationEndPoint
        """

        self._destination = destination

    @property
    def zone_setting(self):
        """Gets the zone_setting of this EngineTask.  # noqa: E501


        :return: The zone_setting of this EngineTask.  # noqa: E501
        :rtype: EngineTaskZoneSetting
        """
        return self._zone_setting

    @zone_setting.setter
    def zone_setting(self, zone_setting):
        """Sets the zone_setting of this EngineTask.


        :param zone_setting: The zone_setting of this EngineTask.  # noqa: E501
        :type: EngineTaskZoneSetting
        """

        self._zone_setting = zone_setting

    @property
    def line_setting(self):
        """Gets the line_setting of this EngineTask.  # noqa: E501


        :return: The line_setting of this EngineTask.  # noqa: E501
        :rtype: EngineTaskLineSetting
        """
        return self._line_setting

    @line_setting.setter
    def line_setting(self, line_setting):
        """Sets the line_setting of this EngineTask.


        :param line_setting: The line_setting of this EngineTask.  # noqa: E501
        :type: EngineTaskLineSetting
        """

        self._line_setting = line_setting

    @property
    def config(self):
        """Gets the config of this EngineTask.  # noqa: E501


        :return: The config of this EngineTask.  # noqa: E501
        :rtype: list[Config]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this EngineTask.


        :param config: The config of this EngineTask.  # noqa: E501
        :type: list[Config]
        """

        self._config = config

    @property
    def updated(self):
        """Gets the updated of this EngineTask.  # noqa: E501


        :return: The updated of this EngineTask.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this EngineTask.


        :param updated: The updated of this EngineTask.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def created(self):
        """Gets the created of this EngineTask.  # noqa: E501


        :return: The created of this EngineTask.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this EngineTask.


        :param created: The created of this EngineTask.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def etag(self):
        """Gets the etag of this EngineTask.  # noqa: E501


        :return: The etag of this EngineTask.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EngineTask.


        :param etag: The etag of this EngineTask.  # noqa: E501
        :type: str
        """

        self._etag = etag

    @property
    def links(self):
        """Gets the links of this EngineTask.  # noqa: E501


        :return: The links of this EngineTask.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EngineTask.


        :param links: The links of this EngineTask.  # noqa: E501
        :type: Links
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EngineTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
